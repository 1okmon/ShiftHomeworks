//
//  DevSkillsInfo.swift
//  homework3
//
//  Created by 1okmon on 26.04.2023.
//

import Foundation

fileprivate enum TitleInfo {
    case experienceAge
    case programmingLanguages
    case expectations
    
    var prefix: String {
        switch self {
        case .experienceAge:
            return "–í –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ "
        case .programmingLanguages:
            return "–û–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —è–∑—ã–∫–∞—Ö:"
        case .expectations:
            return "–û–∂–∏–¥–∞–Ω–∏—è: "
        }
    }
}

fileprivate enum ExperienceAgeLimit {
    static let min = 0
    static let max = 100
}

struct DevSkillsInfo: MyInfoGenerator {
    private let experienceAge: Int
    private let programmingLanguages: [String]
    private let expectations: String
    
    private func postfixOfExperienceAge(experienceAge: Int) -> String {
        guard experienceAge > ExperienceAgeLimit.min,
              experienceAge < ExperienceAgeLimit.max else { return String() }
        let decadeDigit:Int = (experienceAge % 100) / 10
        guard decadeDigit != 1 else { return "–ª–µ—Ç" }
        switch experienceAge % 10 {
        case 0:
            return "–ª–µ—Ç"
        case 1:
            return "–≥–æ–¥"
        case 2...4:
            return "–≥–æ–¥–∞"
        case 4 ..< 9:
            return "–ª–µ—Ç"
        default:
            return String()
        }
    }
    
    static func myInfo() -> DevSkillsInfo {
        return DevSkillsInfo(experienceAge: 21,
                             programmingLanguages: ["Swift", "C#", "Java", "PHP"],
                             expectations: "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏/—É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ iOS —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. \n–°—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã –¶–§–¢üòÉ")
    }
    
    var experienceAgeDescription: String {
        TitleInfo.experienceAge.prefix + experienceAge.description + " " + postfixOfExperienceAge(experienceAge: experienceAge)
    }
    
    var programmingLanguagesDescription: String {
        var text = TitleInfo.programmingLanguages.prefix
        programmingLanguages.forEach {
            text += "\n\t" + $0
        }
        return text
    }
    
    var expectationsDescription: String {
        TitleInfo.expectations.prefix + expectations
    }
}
